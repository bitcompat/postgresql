name: build

on:
  push:
    branches:
      - main

jobs:
  build_protobuf:
    uses: bitcompat/base/.github/workflows/build-library.yaml@main
    with:
      name: protobuf
      path: lib/protobuf

  build_unixodbc:
    uses: bitcompat/base/.github/workflows/build-library.yaml@main
    with:
      name: unixodbc
      path: lib/unixodbc

  build_libproj:
    uses: bitcompat/base/.github/workflows/build-library.yaml@main
    with:
      name: libproj
      path: lib/libproj

  build_gdal:
    needs:
      - build_protobuf
      - build_unixodbc
      - build_libproj
    strategy:
      matrix:
        platform:
          - amd64
          - arm64

    name: Build GDAL library - ${{ matrix.platform }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v4
        with:
          name: protobuf-${{ matrix.platform }}
          path: lib/gdal/build/protobuf
      - uses: actions/download-artifact@v4
        with:
          name: unixodbc-${{ matrix.platform }}
          path: lib/gdal/build/unixodbc
      - uses: actions/download-artifact@v4
        with:
          name: libproj-${{ matrix.platform }}
          path: lib/gdal/build/libproj

      - run: |
          mkdir -p lib/gdal/lib
          mv lib/gdal/build/unixodbc/build.tar lib/gdal/lib/unix-odbc.tar
          mv lib/gdal/build/libproj/build.tar lib/gdal/lib/libproj.tar
          mv lib/gdal/build/protobuf/build.tar lib/gdal/lib/protobuf.tar
          cd lib/gdal/lib/
          tar xf unix-odbc.tar
          tar xf libproj.tar
          tar xf protobuf.tar

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build container
        uses: docker/build-push-action@v6
        with:
          platforms: linux/${{ matrix.platform }}
          context: lib/gdal
          tags: gdal-build:latest
          load: true
          cache-from: type=gha,scope=gdal=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=gdal=${{ matrix.platform }}

      - name: Extract compiled library
        run: |
          rm -rf build
          docker create --name lib gdal-build:latest
          docker cp -a lib:/opt/bitnami build
          tar -cf build.tar build/

      - name: Upload built library result
        uses: actions/upload-artifact@v3
        with:
          name: gdal-${{ matrix.platform }}
          path: build.tar

  build_package:
    needs: [build_gdal]
    name: Build package - PostgreSQL ${{ matrix.postgresql_version.major }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        postgresql_version:
          - version: '16.1' # renovate: datasource=github-tags depName=postgres/postgres extractVersion=^REL_?(?<version>[\d_]+)$ versioning=loose
            latest: true
            revision: 1
          - version: '15.5' # renovate: datasource=github-tags depName=postgres/postgres extractVersion=^REL_?(?<version>[\d_]+)$ versioning=loose
            latest: false
            revision: 1
          - version: '14.10' # renovate: datasource=github-tags depName=postgres/postgres extractVersion=^REL_?(?<version>[\d_]+)$ versioning=loose
            latest: false
            revision: 1
          - version: '13.13' # renovate: datasource=github-tags depName=postgres/postgres extractVersion=^REL_?(?<version>[\d_]+)$ versioning=loose
            latest: false
            revision: 1
          - version: '12.17' # renovate: datasource=github-tags depName=postgres/postgres extractVersion=^REL_?(?<version>[\d_]+)$ versioning=loose
            latest: false
            revision: 1

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v3
        with:
          name: gdal-amd64
          path: build/linux/amd64

      - uses: actions/download-artifact@v3
        with:
          name: gdal-arm64
          path: build/linux/arm64

      - name: Extract built artifacts
        run: |
          pushd build/linux/amd64
          tar xf build.tar
          rm build.tar
          popd
          pushd build/linux/arm64
          tar xf build.tar
          rm build.tar
          popd

      - uses: actions/github-script@v6
        id: version-tags
        env:
          VERSION: '${{ matrix.postgresql_version.version }}'
          REVISION: '${{ matrix.postgresql_version.revision }}'
        with:
          result-encoding: string
          script: |
            const { REVISION: revision, VERSION: version } = process.env;
            const [ major, minor, patch ] = version.split('.').filter(V => '' !== V);
            
            return `
            ${major}.${minor}-bookworm-r${revision}
            ${major}.${minor}-bookworm
            ${major}.${minor}
            ${major}
            `;

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: docker_meta
        name: Extract docker image metadata
        uses: docker/metadata-action@v4.6.0
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
            public.ecr.aws/bitcompat/${{ github.event.repository.name }}
          tags: |
            ${{ matrix.version.latest && 'latest' || '' }}
            ${{ steps.version-tags.outputs.result }}

      - name: Build and Push container images
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          build-args: |
            RUN_TESTS=0
            SERVER_VERSION=${{ matrix.postgresql_version.version }}
          push: true
          context: .
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha,scope=postgresql-${{ matrix.postgresql_version.version }}
          cache-to: type=gha,mode=max,scope=postgresql-${{ matrix.postgresql_version.version }}

      - name: Sign image with a key
        run: |
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${TAGS}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
